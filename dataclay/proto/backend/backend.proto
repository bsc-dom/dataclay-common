syntax = "proto3";

package dataclay.proto.backend;

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_package = "es.bsc.dataclay.proto.backend";

/* The BackendService provides the storage and active features of dataClay.

A typical dataClay deployment will have one or several backends depending on the available
resources of the system. Each backend is responsible for storing objects and executing methods
on them.
*/
service BackendService {

  /*
  MakePersistent(pickled_obj: list[bytes])

  :param pickled_obj: List of pickled objects to make persistent.

  Given a set of objects, store them inside dataClay (make them persistent).
  */
  rpc MakePersistent(MakePersistentRequest) returns (google.protobuf.Empty) {}

  /*
  CallActiveMethod(object_id: str, method_name: str, args: bytes, kwargs: bytes) -> (bytes, bool)

  :param object_id: ID of the object to call the method.
  :param method_name: Name of the method to call.
  :param args: Pickled arguments for the method.
  :param kwargs: Pickled keyword arguments for the method.
  :return: Pickled result of the method call and a flag to indicate that the result is an exception.

  Call a method on an object stored in dataClay.
  */
  rpc CallActiveMethod(CallActiveMethodRequest) returns (CallActiveMethodResponse) {}

  /*
  GetObjectAttribute(object_id: str, attribute: str) -> (bytes, bool)

  :param object_id: ID of the object to get the attribute.
  :param attribute: Name of the attribute to get.
  :return: Pickled value of the attribute and a flag to indicate if the result is an exception.

  Get an attribute from an object stored in dataClay.
  */
  rpc GetObjectAttribute(GetObjectAttributeRequest) returns (GetObjectAttributeResponse) {}

  /*
  SetObjectAttribute(object_id: str, attribute: str, serialized_attribute: bytes) -> (bytes, bool)

  :param object_id: ID of the object to set the attribute.
  :param attribute: Name of the attribute to set.
  :param serialized_attribute: Pickled value of the attribute.
  :return: Pickled result of the setter operation and a flag to indicate if the result is an exception.

  Set an attribute into an object stored in dataClay.
  */
  rpc SetObjectAttribute(SetObjectAttributeRequest) returns (SetObjectAttributeResponse) {}

  /*
  DelObjectAttribute(object_id: str, attribute: str) -> (bytes, bool)

  :param object_id: ID of the object to delete the attribute.
  :param attribute: Name of the attribute to delete.
  :return: Pickled result of the delete operation and a flag to indicate if the result is an exception.

  Delete an attribute from an object stored in dataClay.
  */
  rpc DelObjectAttribute(DelObjectAttributeRequest) returns (DelObjectAttributeResponse) {}

  /*
  GetObjectProperties(object_id: str) -> (bytes)

  :param object_id: ID of the object to get the properties.
  :return: Pickled properties of the object.

  Get all the properties (i.e. attributes) of an object stored in dataClay.
  */
  rpc GetObjectProperties(GetObjectPropertiesRequest) returns (google.protobuf.BytesValue) {}

  /*
  UpdateObjectProperties(object_id: str, serialized_properties: bytes) -> None

  :param object_id: ID of the object to update the properties.
  :param serialized_properties: Pickled properties to update.

  Update the properties (i.e. attributes) of an object stored in dataClay.
  */
  rpc UpdateObjectProperties(UpdateObjectPropertiesRequest) returns (google.protobuf.Empty) {}

  /*
  SendObjects(object_ids: list[str], backend_id: str, make_replica: bool, recursive: bool, remotes: bool) -> None

  :param object_ids: List of object IDs to send, from this backend to the backend specified by backend_id.
  :param backend_id: ID of the backend to send the objects to.
  :param make_replica: Flag to indicate if this operation is creating a replica.
  :param recursive: Flag to indicate if the operation should be recursive.
  :param remotes: Flag to indicate if the operation should include remote objects. If not set, only local objects are sent.

  Start a send operation from this backend to a target backend.
  */
  rpc SendObjects(SendObjectsRequest) returns (google.protobuf.Empty) {}

  /*
  RegisterObjects(dict_bytes: list[bytes], make_replica: bool) -> None

  :param dict_bytes: List of pickled dictionaries with object information to register.
  :param make_replica: Flag to indicate if this operation is creating a replica.

  Register a set of objects in this dataClay backend (and, consequently, trigger a metadata update).
  */
  rpc RegisterObjects(RegisterObjectsRequest) returns (google.protobuf.Empty) {}

  /*
  NewObjectVersion(object_id: str) -> str

  :param object_id: ID of the object to create a new version.
  :return: Information of the newly created object (i.e. new version object).

  Create a new version of an object stored in dataClay.
  */
  rpc NewObjectVersion(NewObjectVersionRequest) returns (NewObjectVersionResponse) {}

  /*
  ConsolidateObjectVersion(object_id: str) -> None

  :param object_id: ID of the object to consolidate.

  Consolidate the versions of an object stored in dataClay. The ``object_id`` must be a version
  object. All other versions will be invalidated after this.
  */
  rpc ConsolidateObjectVersion(ConsolidateObjectVersionRequest) returns (google.protobuf.Empty) {}

  /*
  ProxifyObject(object_id: str, new_object_id: str) -> None

  :param object_id: ID of the object to proxify.
  :param new_object_id: ID of the new object to create as a proxy.

  Create a proxy object for an object stored in dataClay. It is used for internal purposes related 
  to the versioning system.
  */
  rpc ProxifyObject(ProxifyObjectRequest) returns (google.protobuf.Empty) {}

  /*
  ChangeObjectId(object_id: str, new_object_id: str) -> None

  :param object_id: ID of the object to change the ID.
  :param new_object_id: New ID for the object.

  Change the ID of an object stored in dataClay. It is used for internal purposes related to the 
  versioning system.
  */
  rpc ChangeObjectId(ChangeObjectIdRequest) returns (google.protobuf.Empty) {}

  /*
  NewObjectReplica(object_id: str, backend_id: str, recursive: bool, remotes: bool) -> None

  :param object_id: ID of the object to create a replica.
  :param backend_id: ID of the backend to create the replica.
  :param recursive: Flag to indicate if the operation should be recursive.
  :param remotes: Flag to indicate if the operation should include remote objects. If not set, only local objects are replicated.

  Create a replica of an object stored in dataClay. As a result, this backend will contact the target backend
  and create a replica there for the specified objects.
  */
  rpc NewObjectReplica(NewObjectReplicaRequest) returns (google.protobuf.Empty) {}

  /*
  FlushAll() -> None

  Flush all the objects stored in this backend. This ensures that all in-memory state is persisted to the storage and
  unloads all the objects from memory (freeing resources).
  */
  rpc FlushAll(google.protobuf.Empty) returns (google.protobuf.Empty) {}

  /*
  Stop() -> None

  Cleanly stop the backend. This operation ensures tha all in-memory state is persisted and then
  stops the running service (finishing the application).
  */
  rpc Stop(google.protobuf.Empty) returns (google.protobuf.Empty) {}

  /*
  Drain() -> None

  Drain the backend. Transfer all the objects stored in this backend to other backends in the system.
  This can be used to decomission a backend without losing any data.
  */
  rpc Drain(google.protobuf.Empty) returns (google.protobuf.Empty) {}
}


message MakePersistentRequest {
  repeated bytes pickled_obj = 1;
}

message CallActiveMethodRequest {
  string object_id = 1;
  string method_name = 2;
  bytes args = 3;
  bytes kwargs = 4;
}

message CallActiveMethodResponse {
  bytes value = 1;
  bool is_exception = 2;
}

message GetObjectAttributeRequest{
  string object_id = 1;
  string attribute = 2;
}

message GetObjectAttributeResponse {
  bytes value = 1;
  bool is_exception = 2;
}

message SetObjectAttributeRequest{
  string object_id = 1;
  string attribute = 2;
  bytes serialized_attribute = 3;
}

message SetObjectAttributeResponse {
  bytes value = 1;
  bool is_exception = 2;
}

message DelObjectAttributeRequest{
  string object_id = 1;
  string attribute = 2;
}

message DelObjectAttributeResponse {
  bytes value = 1;
  bool is_exception = 2;
}

///////////////////
// Store Methods //
///////////////////

message GetObjectPropertiesRequest {
  string object_id = 1;
}

message UpdateObjectPropertiesRequest {
  string object_id = 1;
  bytes serialized_properties = 2;
}

message SendObjectsRequest {
  repeated string object_ids = 1;
  string backend_id = 2;
  bool make_replica = 3;
  bool recursive = 4;
  bool remotes = 5;
}

message RegisterObjectsRequest {
  repeated bytes dict_bytes = 1;
  bool make_replica = 2;
}

message NewObjectVersionRequest {
  string object_id = 1;
}

message NewObjectVersionResponse {
  string object_info = 1;
}

message ConsolidateObjectVersionRequest {
  string object_id = 1;
}

message ProxifyObjectRequest {
  string object_id = 1;
  string new_object_id = 2;
}

message ChangeObjectIdRequest {
  string object_id = 1;
  string new_object_id = 2;
}

message NewObjectReplicaRequest {
  string object_id = 1;
  string backend_id = 2;
  bool recursive = 3;
  bool remotes = 4;
}